    <Window.Resources>
        <ControlTemplate x:Key="Butt" TargetType="Button" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                         xmlns:s="clr-namespace:System;assembly=mscorlib" >
            <Border Name="Chrome" SnapsToDevicePixels="True" Height="70" Width="70"><!--Background="Transparent" BorderBrush="Transparent" -->
                <Border.Background>
                    <DrawingBrush>
                        <DrawingBrush.Drawing>
                            <GeometryDrawing Brush="Red">
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry RadiusX="{Binding ElementName=Chrome, Path=Width}" RadiusY="{Binding ElementName=Chrome, Path=Height}" />
                                </GeometryDrawing.Geometry>                                
                            </GeometryDrawing>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </Border.Background>
                        <ContentPresenter RecognizesAccessKey="True" Content="{TemplateBinding ContentControl.Content}" 
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                  ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                  Margin="{TemplateBinding Control.Padding}" 
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsKeyboardFocused">                    
                    <Trigger.Value>
                        <s:Boolean>True</s:Boolean>
                    </Trigger.Value>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked">                   
                    <Trigger.Value>
                        <s:Boolean>True</s:Boolean>
                    </Trigger.Value>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled">
                    <Setter Property="TextElement.Foreground">
                        <Setter.Value>
                            <SolidColorBrush>#FFADADAD</SolidColorBrush>
                        </Setter.Value>
                    </Setter>
                    <Trigger.Value>
                        <s:Boolean>False</s:Boolean>
                    </Trigger.Value>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>
    <Grid>
        <Button Content="Button" HorizontalAlignment="Left" Margin="234,114,0,0" Name="button1" 
                VerticalAlignment="Top" Template="{StaticResource ResourceKey=Butt}" Click="button1_Click" />
    </Grid>

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

<Grid> 

	<Button Name='button1' HorizontalAlignment='Center' VerticalAlignment='Center' FontSize='9pt'>
		Hello World
	</Button>
</Grid>

--------------------------------------------------------------

public partial class MainWindow: Window {

long start;
double duration = 5000;
double from = 9.0;
double to = 18.0;

public MainWindow()
{
	InitializeComponent();

	DispatcherTimer timer = new DispatcherTimer();
	timer.Interval = TimeSpan.FromMilliseconds(50);
	start = Environment.TickCount;
	timer.Tick += timer_Tick;
	timer.IsEnabled = true;
}

void timer_Tick(object sender, EventArgs e)
{
	long elapsed = Environment.TickCount - start;
	if (elapsed >= duration) {
		button1.FontSize = to;
		((DispatcherTimer)sender).IsEnabled = false;
		return;
	}
	double increase = to - from;
	button1.FontSize = from + (increase / (duration / elapsed));
}
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    <Grid>
        <Button Content="Button" Height="23" HorizontalAlignment="Left" Margin="203,127,0,0" Name="button1" VerticalAlignment="Top" Width="75" MouseEnter="button1_MouseEnter" Click="button1_Click" />
    </Grid>

-------------------------------------------------------------------------

bool isSpinning = false;

 private void button1_MouseEnter(object sender, MouseEventArgs e)
        {
            if (!isSpinning)
            {
                isSpinning = true;
                // Создать объект анимации double и зарегистрировать с событием Completed. 
                DoubleAnimation dblAnim = new DoubleAnimation();
                dblAnim.Completed += animation_Completed;

                //На завершение поворота кнопке отводится 4 секунды. 
                dblAnim.Duration = new Duration(TimeSpan.FromSeconds(4)); 

                // Установить начальное и конечное значения. 
                dblAnim.From = 0;
                dblAnim.To = 360;

                // Бесконечный цикл.
                //dblAnim.RepeatBehavior = RepeatBehavior.Forever;
                // Повторить три раза. 
                //dblAnim.RepeatBehavior = new RepeatBehavior(3);
                // Повторять в течение 10 секунд. 
                dblAnim.RepeatBehavior = new RepeatBehavior(TimeSpan.FromSeconds(10));

                // Создать объект RotateTransform и присвоить 
                // его свойству RenderTransform кнопки. 
                RotateTransform rt = new RotateTransform();

                // вращать вокруг центра
                button1.RenderTransformOrigin = new Point(0.5, 0.5);
                button1.RenderTransform = rt;
                // Выполнить анимацию объекта RotateTransform. 
                // Бесконечный цикл. 

                rt.BeginAnimation(RotateTransform.AngleProperty, dblAnim);
            }
        }
        
        private void animation_Completed(object sender, EventArgs e)
        {
             isSpinning = false; 
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            DoubleAnimation dblAnim = new DoubleAnimation();
            dblAnim.From = 1.0;
            dblAnim.To = 0.0;
            dblAnim.AutoReverse = true; // по завершении - запуск в обратном порядке
            button1.BeginAnimation(Button.OpacityProperty, dblAnim);
        }
