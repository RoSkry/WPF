DependencyProperty - класс

Представляет свойство, которое может быть установлено такими способами, как стилизация, привязка данных, анимация и наследование.

Иерархия наследования
System.Object 
  System.Windows.DependencyProperty
Пространство имен:  System.Windows

[TypeConverterAttribute("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public sealed class DependencyProperty

Использование атрибута XAML
<object property="dependencyPropertyName"/>
- or -
<object property="ownerType.dependencyPropertyName"/>
- or -
<object property="attachedPropertyOwnerType.attachedPropertyName"/>

Значения XAML
dependencyPropertyName
Строка, указывающая DependencyProperty.Name требуемого свойства зависимостей. Это может предшествовать префикс пространства имен XML, если свойство не входящих в пространство имен XML по умолчанию (дополнительные сведения см. в разделе Пространства имен XAML и сопоставление пространств имен для WPF XAML.)
ownerType.dependencyPropertyName
Строка, задающая тип владельца свойства зависимостей, точка (.), DependencyProperty.Name. ownerType также может предшествовать префикс пространства имен XML. Это потребление указано в поздно-привязанным стили и шаблоны, где владельца свойства зависимостей должны быть определены для разбора, поскольку контекст TargetType пока не известен. Дополнительные сведения см. в разделе Стилизация и использование шаблонов.
attachedPropertyOwnerType.attachedPropertyName
Строка, указывающая владельцем присоединенного свойства, точка (.), а затем имя присоединенного свойства. attachedPropertyOwnerType также может предшествовать префикс пространства имен XML.

Свойства

 DefaultMetadata	Получает метаданные свойства зависимостей по умолчанию.
 GlobalIndex	Получает автоматически сформированное значение, которое однозначно идентифицирует свойство зависимостей.
 Name	Возвращает имя свойства зависимостей.
 OwnerType	Возвращает тип объекта, который регистрировал свойство зависимостей с системой свойств или добавляется как владелец свойства.
 PropertyType	Получает тип, свойство зависимостей используется для его значения.
 ReadOnly	Возвращает значение, указывающее, является ли свойство зависимостей, заданное этим DependencyProperty экземпляр доступным только для чтения свойства зависимостей.
 ValidateValueCallback	Получает обратный вызов для проверки значения свойства зависимостей.

Методы

 AddOwner(Type)	Добавляет другой тип в качестве владельца свойства зависимости, которое уже зарегистрировано.
 AddOwner(Type, PropertyMetadata)	Добавляет другой тип в качестве владельца свойства зависимостей, которое уже зарегистрировано, предоставляя метаданные свойства зависимостей для свойства зависимостей по мере того, как оно существует в указанном типе владелец.
 Equals(Object)	Определяет, равен ли заданный объект текущему объекту. (Унаследовано от Object.)
 GetHashCode	Возвращает хэш-код для этого DependencyProperty. (Переопределяет Object.GetHashCode().)
 GetMetadata(DependencyObject)	Возвращает метаданные для этого свойства зависимостей по мере того, как оно существует в экземпляре указанного объекта.
 GetMetadata(DependencyObjectType)	Возвращает метаданные для этого свойства зависимостей по мере того, как оно существует в указанном типе.
 GetMetadata(Type)	Возвращает метаданные для этого свойства зависимостей по мере того, как оно существует в существующем указанного типа.
 GetType	Возвращает объект класса Type для текущего экземпляра. (Унаследовано от Object.)
 IsValidType	Определяет, является ли указанное значение допустимо для данного типа свойства зависимостей, как проверяется для типа свойства, представленного в исходной регистрации свойства зависимостей.
 IsValidValue	Указывает, разрешено ли указанное значение для типа свойства через базовую проверку типа, а также потенциально если в разрешенный диапазон значений для этого типа.
 OverrideMetadata(Type, PropertyMetadata)	Задает альтернативные метаданные для этого свойства зависимостей в случае присутствия в экземплярах заданного типа, переопределяя метаданные, которые существовали для свойства зависимостей, как оно было унаследовано от базовых типов.
 OverrideMetadata(Type, PropertyMetadata, DependencyPropertyKey)	Предоставляет другие метаданные только для чтения свойства зависимостей в случае присутствия в экземплярах заданного типа, переопределяя метаданные, который был указан в исходной регистрации свойства зависимостей. Необходимо передавать DependencyPropertyKey для свойства зависимости " только для чтения ", который нужно избежать возникновения исключения.
 Статический  Register(String, Type, Type)	Регистрирует свойство зависимостей с указанным именем свойства, типом свойства и типом владельца.
 Статический  Register(String, Type, Type, PropertyMetadata)	Регистрирует свойства зависимостей с указанным именем свойства, тип свойства, типом владельца и метаданными свойства.
 Статический  Register(String, Type, Type, PropertyMetadata, ValidateValueCallback)	Регистрирует свойство зависимостей с указанным именем свойства, типом свойства, типом владельца метаданными свойства и обратным вызовом для проверки значения свойства.
 Статический  RegisterAttached(String, Type, Type)	Регистрирует присоединенное свойство с указанным именем свойства, тип свойства и тип владельца.
 Статический  RegisterAttached(String, Type, Type, PropertyMetadata)	Регистрирует присоединенное свойство с указанным именем свойства, типом свойства, типом владельца и метаданными свойства.
 Статический  RegisterAttached(String, Type, Type, PropertyMetadata, ValidateValueCallback)	Регистрирует присоединенное свойство тип указанного свойства, типом владелец метаданными свойства и обратным вызовом для проверки значений свойств.
 Статический  RegisterAttachedReadOnly(String, Type, Type, PropertyMetadata)	Регистрирует только для чтения присоединенное свойствос типом указанного свойства, типом владельца и метаданными свойства.
 Статический  RegisterAttachedReadOnly(String, Type, Type, PropertyMetadata, ValidateValueCallback)	Регистрирует только для чтения присоединенное свойствос типом указанного свойства, типом владелец метаданными свойства и обратным вызовом проверки.
 Статический  RegisterReadOnly(String, Type, Type, PropertyMetadata)	Регистрирует только для чтения свойства зависимостейс типом указанного свойства, типом владельца и метаданными свойства.
 Статический  RegisterReadOnly(String, Type, Type, PropertyMetadata, ValidateValueCallback)	Регистрирует только для чтения свойства зависимостейс типом указанного свойства, типом владелец метаданными свойства и обратным вызовом проверки.
 ToString	Возвращает строковое представление свойства зависимостей. (Переопределяет Object.ToString().)

Статическое поле

 UnsetValue	Задает фиксированное значение, которое используется WPF система свойств вместо null указывает, что свойство существует, но не было задано значение системой свойств.

Заметки
Класс DependencyProperty поддерживает следующие возможности Windows Presentation Foundation (WPF):
Свойство может быть задано в рамках стиля. Дополнительные сведения см. в разделе Стилизация и использование шаблонов.
Свойство может быть установлено с помощью привязки данных. Дополнительные сведения об участии свойств зависимостей в привязке данных см. в разделе Как привязать свойства двух элементов управления.
Свойство может быть задано ссылкой на динамический ресурс. Дополнительные сведения см. в разделе Ресурсы XAML.
Свойство может автоматически наследовать своё значение из родительского элемента в дереве элементов. Дополнительные сведения см. в разделе Наследование значения свойства.
Свойство может быть анимировано. Дополнительные сведения см. в разделе Общие сведения об эффектах анимации.
Свойство может информировать, когда было изменено предыдущее значение свойства и значение свойства может привести. Дополнительные сведения см. в разделе Проверка и обратные вызовы свойства зависимостей.
Свойство может сообщать WPF, например, о том, должно ли из изменения значения свойства следовать требование к системе макетирования заново расположить визуальные составляющие элемента.
Свойство поддерживается в Конструкторе WPF в Visual Studio. Например, свойство может быть изменено в окне Свойства.
Дополнительные сведения о свойствах зависимостей см. Общие сведения о свойствах зависимости. Если требуется свойства пользовательских типах поддержки возможности в предыдущем списке, необходимо создать свойство зависимостей. Чтобы узнать, как создать пользовательские свойства зависимостей см. в разделе Пользовательские свойства зависимостей.
Свойство присоединенное свойство, которое включает в себя любой объект к данным отчета к типу, который определяет присоединенное свойство. IN WPFлюбой тип, унаследованный от DependencyObject присоединенное свойство может использоваться независимо от того, является ли тип наследуется от типа, определяющий свойство. Присоединенное свойство функция Язык XAML язык. Установка присоединенное свойство in Язык XAMLиспользуйте ownerType.propertyName синтаксис. пример присоединенного свойства DockPanel.Dock свойство. Если нужно создать свойство, которое можно использовать для всех DependencyObject типы, затем необходимо создать присоединенное свойство. Дополнительные сведения о присоединенных свойств, включая способы их создания, см. в разделе Общие сведения о вложенных свойствах зависимостей.

Примеры
В этом примере показано, как обеспечить поддержку свойства среда CLR (common language runtime) с использованием поля DependencyProperty, определяя тем самым свойство зависимостей. Если вы определяете собственные свойства и хотите, чтобы они поддерживали множество аспектов функциональности Windows Presentation Foundation (WPF), включая стили, привязку данных, наследование, анимацию и значения по умолчанию, следует реализовать их как свойство зависимостей.
В следующем примере сначала регистрируется свойство зависимостей путем вызова метода Register. Поле идентификатора, используемое для хранения имени и характеристик свойства зависимостей, должно иметь имя Name, которое выбирается для свойства зависимостей в составе вызова Register с добавлением строкового литерала Property. Например, если регистрируется свойство зависимостей с именем Name для поля Location, то поле идентификатора, определяемое для свойства зависимостей, должно называться LocationProperty.
В этом примере для свойства зависимостей и его метода доступа CLR используется имя State; поле идентификатора называется StateProperty; тип свойства — Boolean; тип, регистрирующий свойство зависимостей — MyStateControl.
Если не следовать этому шаблону именования, конструкторы могут неправильно обработать свойство, и определенные аспекты приложения стиля системы свойств могут работать не так, как ожидалось.
Для свойства зависимостей можно также указать используемые по умолчанию метаданные. В этом примере в качестве значения по умолчанию для свойства зависимостей State регистрируется значение false.

public class MyStateControl : ButtonBase
{
  public MyStateControl() : base() { }
  public Boolean State
  {
    get { return (Boolean)this.GetValue(StateProperty); }
    set { this.SetValue(StateProperty, value); } 
  }
  public static readonly DependencyProperty StateProperty = DependencyProperty.Register(
    "State", typeof(Boolean), typeof(MyStateControl),new PropertyMetadata(false));
}


Дополнительные сведения о том, как и зачем реализовать свойство зависимостей в противоположность поддержке свойства CLR с использованием закрытого поля, см. в разделе Общие сведения о свойствах зависимости.